// <auto-generated />
using System;
using App.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace App.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20180521175445_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("EmployeeCalendar")
                .HasAnnotation("ProductVersion", "2.1.0-rc1-32029")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("App.Model.Holiday", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DATE");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("Day")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("DAY([Date])");

                    b.Property<string>("Description");

                    b.Property<int>("Month")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("MONTH([Date])");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<int>("Year")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("YEAR([Date])");

                    b.HasKey("ID");

                    b.ToTable("Holiday");
                });

            modelBuilder.Entity("App.Model.Role", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.ToTable("Role");

                    b.HasData(
                        new { ID = 1, Active = true, DateCreated = new DateTime(2018, 5, 21, 19, 54, 33, 210, DateTimeKind.Local), Description = "Administrator", Name = "Admin" },
                        new { ID = 2, Active = true, DateCreated = new DateTime(2018, 5, 21, 19, 54, 33, 210, DateTimeKind.Local), Description = "Employee", Name = "Employee" }
                    );
                });

            modelBuilder.Entity("App.Model.User", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255);

                    b.Property<string>("LastName")
                        .HasMaxLength(255);

                    b.Property<string>("Password");

                    b.HasKey("ID");

                    b.ToTable("User");

                    b.HasData(
                        new { ID = 1, Active = true, DateCreated = new DateTime(2018, 5, 21, 19, 54, 33, 206, DateTimeKind.Local), Email = "admin1@ec.com", FirstName = "Admin1", Password = "x61Ey612Kl2gpFL56FT9weDnpSo4AV8j8+qx2AuTHdRyY036xxzTTrw10Wq3+4qQyB+XURPWx1ONxp3Y3pB37A==" },
                        new { ID = 2, Active = true, DateCreated = new DateTime(2018, 5, 21, 19, 54, 33, 207, DateTimeKind.Local), Email = "admin2@ec.com", FirstName = "Admin2", Password = "x61Ey612Kl2gpFL56FT9weDnpSo4AV8j8+qx2AuTHdRyY036xxzTTrw10Wq3+4qQyB+XURPWx1ONxp3Y3pB37A==" },
                        new { ID = 3, Active = true, DateCreated = new DateTime(2018, 5, 21, 19, 54, 33, 207, DateTimeKind.Local), Email = "martin.oliver@ec.com", FirstName = "Martin", LastName = "Oliver", Password = "voHa7tBTzLqzhskUuRtanltSu+yVUb7bN+nu2YEylI0r9I97ab6FBbFGasaP5gvhNh7xsHjmnG9MwhMGOGvbeg==" },
                        new { ID = 4, Active = true, DateCreated = new DateTime(2018, 5, 21, 19, 54, 33, 207, DateTimeKind.Local), Email = "christopher.johnson@ec.com", FirstName = "Christopher ", LastName = "Johnson", Password = "LBlU1yhdXop/N50+PTh4ACbfj8ZPevCerWCF3QBSUnmosfIOXpMebDnfxK1Zj9B2OeJnQl9Ds6PW61hTJoj8Ww==" },
                        new { ID = 5, Active = true, DateCreated = new DateTime(2018, 5, 21, 19, 54, 33, 207, DateTimeKind.Local), Email = "richard.jackson@ec.com", FirstName = "Richard ", LastName = "Jackson", Password = "ZEZzRC/6axBx6TMXhBftfXX/C3kPzeWlKyaehMweevTxHzDhbqd+iRuyZsbwk9zIfmS1zYk6EznXE/kPRWr8Iw==" },
                        new { ID = 6, Active = true, DateCreated = new DateTime(2018, 5, 21, 19, 54, 33, 207, DateTimeKind.Local), Email = "jessica.stratton@ec.com", FirstName = "Jessica ", LastName = "Stratton", Password = "p0dzcANjeuT5Ggybu1x/lSivzXu/d4MvvPWI2/fLK4TNoGeaQ+QueZ8q1XYGsX+OI24FFfhx7VIVOmSCc8Ytfw==" },
                        new { ID = 7, Active = true, DateCreated = new DateTime(2018, 5, 21, 19, 54, 33, 207, DateTimeKind.Local), Email = "frank.boehm@ec.com", FirstName = "Frank", LastName = "Boehm", Password = "GbcCtvGxNcoAnOHfE9hHOLdMt0Ra9j3Tby/e/nffg/zezzB9tTYJNSgkLDzlKpNQRVrLHorZBvzNQP0JWrq08Q==" },
                        new { ID = 8, Active = true, DateCreated = new DateTime(2018, 5, 21, 19, 54, 33, 207, DateTimeKind.Local), Email = "joan.camp@ec.com", FirstName = "Joann ", LastName = "Camp", Password = "47Re7pm1d0izINaLr8gpNtNOO8F2obGGlhcduinHgqqNXgsaDjXtaU8GcLjaueeHnIynB+UcNi0cGqNqO1DRXg==" },
                        new { ID = 9, Active = true, DateCreated = new DateTime(2018, 5, 21, 19, 54, 33, 207, DateTimeKind.Local), Email = "julie.burroughs@ec.com", FirstName = "Julie ", LastName = "Burroughs", Password = "7qrgzXN9I2na3BLoFVDGJovOlWI28WEPfg2NA85lIglFmArxAL7pwQfU0IStmrA6Q1KnCoOGDOCuA9ev46RsAw==" }
                    );
                });

            modelBuilder.Entity("App.Model.UserRoles", b =>
                {
                    b.Property<int>("UserID");

                    b.Property<int>("RoleID");

                    b.HasKey("UserID", "RoleID");

                    b.HasIndex("RoleID");

                    b.ToTable("User.Role");

                    b.HasData(
                        new { UserID = 1, RoleID = 1 },
                        new { UserID = 2, RoleID = 1 },
                        new { UserID = 3, RoleID = 2 },
                        new { UserID = 4, RoleID = 2 },
                        new { UserID = 5, RoleID = 2 },
                        new { UserID = 6, RoleID = 2 },
                        new { UserID = 7, RoleID = 2 },
                        new { UserID = 8, RoleID = 2 },
                        new { UserID = 9, RoleID = 2 }
                    );
                });

            modelBuilder.Entity("App.Model.Vacation", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<int>("AvailabilityID");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("Date");

                    b.Property<int>("StatusID");

                    b.Property<int>("TypeID");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("AvailabilityID");

                    b.HasIndex("StatusID");

                    b.HasIndex("TypeID");

                    b.HasIndex("UserID");

                    b.ToTable("Vacation");

                    b.HasData(
                        new { ID = 1, Active = true, AvailabilityID = 1, DateCreated = new DateTime(2018, 5, 21, 19, 54, 33, 212, DateTimeKind.Local), DateFrom = new DateTime(2018, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified), DateTo = new DateTime(2018, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), StatusID = 1, TypeID = 1, UserID = 4 },
                        new { ID = 2, Active = true, AvailabilityID = 3, DateCreated = new DateTime(2018, 5, 21, 19, 54, 33, 212, DateTimeKind.Local), DateFrom = new DateTime(2018, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), DateTo = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), StatusID = 2, TypeID = 2, UserID = 6 },
                        new { ID = 3, Active = true, AvailabilityID = 2, DateCreated = new DateTime(2018, 5, 21, 19, 54, 33, 212, DateTimeKind.Local), DateFrom = new DateTime(2018, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), DateTo = new DateTime(2018, 7, 23, 0, 0, 0, 0, DateTimeKind.Unspecified), StatusID = 1, TypeID = 1, UserID = 8 }
                    );
                });

            modelBuilder.Entity("App.Model.VacationAvailability", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.ToTable("Vacation.Availability");

                    b.HasData(
                        new { ID = 1, Active = true, DateCreated = new DateTime(2018, 5, 21, 19, 54, 33, 211, DateTimeKind.Local), Description = "Available to contact", Name = "Available" },
                        new { ID = 2, Active = true, DateCreated = new DateTime(2018, 5, 21, 19, 54, 33, 211, DateTimeKind.Local), Description = "Available to contact at certain time", Name = "Partially available" },
                        new { ID = 3, Active = true, DateCreated = new DateTime(2018, 5, 21, 19, 54, 33, 211, DateTimeKind.Local), Description = "Unavailable to contact", Name = "Unavailable" }
                    );
                });

            modelBuilder.Entity("App.Model.VacationStatus", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.ToTable("Vacation.Status");

                    b.HasData(
                        new { ID = 1, Active = true, DateCreated = new DateTime(2018, 5, 21, 19, 54, 33, 211, DateTimeKind.Local), Description = "Vacation is entered but not confirmed", Name = "Entered" },
                        new { ID = 2, Active = true, DateCreated = new DateTime(2018, 5, 21, 19, 54, 33, 211, DateTimeKind.Local), Description = "Vacation is confirmed by administrator", Name = "Confirmed" },
                        new { ID = 3, Active = true, DateCreated = new DateTime(2018, 5, 21, 19, 54, 33, 211, DateTimeKind.Local), Description = "Vacation is rejected by administrator", Name = "Rejected" }
                    );
                });

            modelBuilder.Entity("App.Model.VacationType", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.ToTable("Vacation.Type");

                    b.HasData(
                        new { ID = 1, Active = true, DateCreated = new DateTime(2018, 5, 21, 19, 54, 33, 211, DateTimeKind.Local), Description = "Free days", Name = "Vacation leave" },
                        new { ID = 2, Active = true, DateCreated = new DateTime(2018, 5, 21, 19, 54, 33, 211, DateTimeKind.Local), Description = "Sickness days", Name = "Sick leave" }
                    );
                });

            modelBuilder.Entity("App.Model.UserRoles", b =>
                {
                    b.HasOne("App.Model.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Model.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("App.Model.Vacation", b =>
                {
                    b.HasOne("App.Model.VacationAvailability", "Availability")
                        .WithMany()
                        .HasForeignKey("AvailabilityID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Model.VacationStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Model.VacationType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Model.User", "User")
                        .WithMany("Vacations")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
